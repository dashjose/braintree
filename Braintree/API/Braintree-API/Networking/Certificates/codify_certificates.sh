#!/usr/bin/env zsh

IMPLEMENTATION=BTAPIPinnedCertificates.m
HEADER=BTAPIPinnedCertificates.h
certificates=$(find *.crt -type f)
certificate_count=${$(echo ${certificates} | wc -l)}

cat <<EOF > ${HEADER}
// :rotating_light THIS CODE IS GENERATED BY codify_certificates.sh :rotating_light:
/// Encapsualtes our trusted x509 Certificates for Secure SSL Communication with Braintree's servers.
///
/// This class consists of code that is generated by the codify_certificates.sh script, which takes
/// a set of PEM formatted certificates and encodes them in code in order to avoid storing certificates
/// files in an NSBundle.
@interface BTAPIPinnedCertificates : NSObject
/// Returns the set of trusted root certificates based on the PEM files located in this directory.
///
/// @return An array of trusted certificates encoded in the DER format, encapsulated in NSData objects.
+ (NSArray *)trustedCertificates;
@end
EOF

cat <<EOF > ${IMPLEMENTATION}
#import "BTAPIPinnedCertificates.h"

// :rotating_light THIS CODE IS GENERATED BY codify_certificates.sh :rotating_light:
@implementation BTAPIPinnedCertificates

+ (NSArray *)trustedCertificates {
    NSMutableArray *trustedCertificates = [NSMutableArray arrayWithCapacity:${certificate_count}];
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-variable"
EOF

echo ${certificates} | while read file; do
  echo "    {" >> ${IMPLEMENTATION}
  openssl x509 -inform pem -in "${file}" -C -noout >> ${IMPLEMENTATION}

  cat <<EOF >> ${IMPLEMENTATION}
        [trustedCertificates addObject:[NSData dataWithBytes:XXX_certificate length:sizeof(XXX_certificate)]];
EOF

  echo "    }" >> ${IMPLEMENTATION}
done

cat <<EOF >> ${IMPLEMENTATION}
#pragma clang diagnostic pop

    return [NSArray arrayWithArray:trustedCertificates];
}

@end
EOF

